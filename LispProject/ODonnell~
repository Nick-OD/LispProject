;;;; -*- Mode: Lisp; -*-

(defstruct person 
  (name nil)
  (parents (list))
  (children (list))
  (spouses (list))
)



(defun storeperson (name struct tree)
;;;"Students need to write this! This should enter the person structure in STRUCT into the hashtable in FAMY-TREE with the key in SYMBOL-NAME."
(setf (gethash name tree) struct))


(defun personstruct (name tree)
 ;;"Returns a structure of type person corresponding to the key SYMBOL-NAME in the hashtable FAMILY-TREE. If there is no one in the tree with the name in SYMBOL-NAME, returns NIL."
  (gethash name tree nil))

(defun addspouse (spouse-name p)
  (setf (person-spouses p) (cons spouse-name (person-spouses p)))
(setf (person-spouses p) (sort (person-spouses p) #'string<))
)

(defun addchild (child-name p)
  (setf (person-children p) (cons child-name (person-children p)))
)

(defun getparents (p)
  (person-parents (gethash p tree)))

(defun getchildren (p)
  (person-children (gethash p tree)))

(defun getspouses (p)
  (person-spouses (gethash p tree)))

(defun listChildren (p tree)
  (setf children (copy-list(person-children (gethash p tree))))
  (setf sortChildren (copy-list(sort children #'string-lessp)))
  (loop for x in sortChildren
        do (format t "~d~%" x)))

(defun listSpouses (p tree)
  (setf spouses (copy-list(person-spouses (gethash p tree))))
  (setf sortSpouses (copy-list(sort spouses #'string-lessp)))
  (loop for x in sortSpouses 
        do (format t "~d~%" x)))

(defun listSiblings (p tree)
                   (setf parents (copy-list(person-parents (gethash p tree))))
                   (setf parent1 (first parents))
                   (setf parent2 (second parents))
                   (setf children1 (copy-list (person-children (gethash parent1 tree))))
                   (setf children2 (copy-list (person-children (gethash parent2 tree))))
                   (setf childrenAll (union children1 children2)) 
                   (setf childrenall (copy-list(remove (person-name (gethash p tree)) childrenAll)))
                   (setf sortChildrenall (copy-list(sort childrenall #'string-lessp)))
                    (loop for x in sortchildrenall
                          do (format t "~d~%" x)))

(defun siblings (p tree)
(let ((parent1 (personstruct (first (person-parents p)) tree))
      (parent2 (personstruct (second (person-parents p)) tree)))
(when parent1
  (sort (remove (person-name p)
 (delete-duplicates
  (append (person-children parent1) (person-children parent2)) :test #'equal)) #'string<))))

(defun ancestors (p tree)
  (let ((parent1 (personstruct(first (person-parents p))tree ))
        (parent2 (personstruct (second (person-parents p))tree )))
    (when parent1
       (sort (delete-duplicates(append (list(person-name parent1) (person-name parent2))
                                       (ancestors parent1 tree )(ancestors parent2 tree )) :test #'equal) #'string<))))

;;; is funcitons
(defun isspouse (p1 p2)                              
(let ((spouse nil)) ; returns t true or nil false
(if (and p1 p2)
(if  (member (person-name p1) (person-spouses p2) :test #'equal) (setf spouse t)))
(if spouse t nil))) ; If spouse, spouse is true, else spouse is false 

 

(defun ischild (p1 p2)
  (let ((child nil))
    (if (and p1 p2)
    (if (member (person-name p1) (person-children p2) :test #'equal) (setf child t)))
    (if child t nil)))
 

(defun issibling (p1 p2 tree)
(let ((sibling nil))
  (if (and p1 p2)
  (if (member (person-name p1) (siblings p2 tree) :test #'equal) (setf sibling t)))
(if sibling t nil)))

 

(defun iscousin (p1 p2 tree)
(let ((cousinbool nil) (directrel nil))
(when (and p1 p2)
(if (string= (person-name p1) (person-name p2)) (setf directrel t))
(if (or (ischild p1 p2) (ischild p2 p1)) (setf direct t)) 
(let ((ancestors2 (ancestors p2 tree)) (ancestors1 (ancestors p1 tree)))
(if (or (member (person-name p1) ancestors2) (member (person-name p2) ancestors1)) (setf directrel t))
(when (not directrel)
  (loop for person in ancestors1 doing (if (member person ancestors2 :test #'equal) (setf cousinbool t))))))
  (if cousinbool t nil)))

(defun isancestor (p1 p2 tree)
  (let ((ancestorbool nil))
    (if (and p1 p2)
    (if (member (person-name p1) (ancestors p2 tree) :test #'equal) (setf ancestorbool t)))
    (if ancestorbool t nil)))
 

(defun isunrelated (p1 p2 tree)
(let ((unrelatedbool t))
(when (and p1 p2)
(if (or (ischild p1 p2) (ischild p2 p1)) (setf unrelatedbool nil)) ; if one person is a child of the other return false
(if (issibling p1 p2 tree) (setf unrelatedbool nil))
(if (iscousin p1 p2 tree) (setf unrealtedbool nil))
(if (or (isancestor p1 p2 tree) (isancestor p2 p1 tree)) (setf unrelatedbool nil)))
(if unrelatedbool t nil)))

(defun getcousins( )

)
(defun getunrelated( )

) 
  



;;; Start by creating 
(defun equery (p1 p2 p3 tree)
  (if (eql p3 nil) ;no children
      (progn 
        ;if p1 doesnt exist make a new person and store in tree
         (if (eql (personstruct p1 tree) nil)
             (storeperson p1 (make-person :name p1
                                          :parents nil
                                          :children (list)
                                          :spouses (list p2)) tree)
           (progn ;p1 exists (no children)
             (setf temp (personstruct p1 tree))
             (if (not (find p2 (person-spouses temp)))
                 (progn ;p1 spouses if (no children)
                   (setf parents (copy-list (person-parents temp)))
                   (setf children (copy-list (person-children temp)))
                   (setf spouses (copy-list (person-spouses temp)))
                   (setf spouses (append spouses (list p2)))
                   (storeperson p1 (make-person :name p1
                                                :parents parents
                                                :children children 
                                                :spouses spouses) tree)))))
         ;same for p2
         (if (eql (personstruct p2 tree) nil)
             (storeperson p2 (make-person :name p2
                                          :parents nil
                                          :children (list)
                                          :spouses (list p1)) tree)
           (progn ;p2 exist (no children)
             (setf temp (personstruct p2 tree))
             (if (not (find p1 (person-spouses temp)))
                 (progn ;p2 spouses if (no children)
                   (setf parents (copy-list (person-parents temp)))
                   (setf children (copy-list (person-children temp)))
                   (setf spouses (copy-list (person-spouses temp)))
                   (setf spouses (append spouses (list p1)))
                   (storeperson p2 (make-person :name p2
            (maphash #'(lambda (k v) (format t "~a => ~a~%" k v)) tree)                                    :parents parents
                                                :children children 
                                                :spouses spouses) tree))))))
    (progn ;else part of (if (eql p3 nil)) aka children
      (if (eql (personstruct p1 tree) nil) ;check if p1 is in hashtable
             (storeperson p1 (make-person :name p1
                                          :parents nil
                                          :children (list p3)
                                          :spouses (list p2)) tree)
           (progn ;p1 exists children
             ;check for spouse
             (setf temp (personstruct p1 tree))
             (if (not (find p2 (person-spouses temp)))
                 (progn ;p1 spouses if
                   (setf parents (copy-list (person-parents temp)))
                   (setf children (copy-list (person-children temp)))
                   (setf spouses (copy-list (person-spouses temp)))
                   (setf spouses (append spouses (list p2)))
                   (storeperson p1 (make-person :name p1
                                                :parents parents
                                                :children children 
                                                :spouses spouses) tree)))
             ;check for children
             (setf temp (personstruct p1 tree))
             (if (not (find p2 (person-children temp)))
                 (progn ;p1 children if
                   (setf parents (copy-list (person-parents temp)))
                   (setf children (copy-list (person-children temp)))
                   (setf spouses (copy-list (person-spouses temp)))
                   (setf children (append children (list p3)))
                   (storeperson p1 (make-person :name p1
                                                :parents parents
                                                :children children 
                                                :spouses spouses) tree)))))
             ;same for p2
             (if (eql (personstruct p2 tree) nil) ;check if p2 is in hashtable
                 (storeperson p2 (make-person :name p2
                                              :parents nil
                                              :children (list p3)
                                              :spouses (list p1)) tree)
               (progn ;p2 exists children
                 (setf temp (personstruct p2 tree))
                 (if (not (find p1 (person-spouses temp)))
                     (progn ;p2 spouses if
                       (setf parents (copy-list (person-parents temp)))
                       (setf children (copy-list (person-children temp)))
                       (setf spouses (copy-list (person-spouses temp)))
                       (setf spouses (append spouses (list p1)))
                       (storeperson p2 (make-person :name p2
                                                    :parents parents
                                                    :children children 
                                                    :spouses spouses) tree)))
                 ;check for children
                 (setf temp (personstruct p2 tree))
                 (if (not (find p2 (person-children temp)))
                     (progn ;p2 children if 
                       (setf parents (copy-list (person-parents temp)))
                       (setf children (copy-list (person-children temp)))
                       (setf spouses (copy-list (person-spouses temp)))
                       (setf children (append children (list p3)))
                       (storeperson p2 (make-person :name p2
                                                    :parents parents
                                                    :children children 
                                                    :spouses spouses) tree)))))
             (if (eql (personstruct p3 tree) nil) ;check if p3 is in hashtable
                 (storeperson p3 (make-person :name p3
                                              :parents (list p1 p2)
                                              :children (list)
                                              :spouses (list)) tree)))))


(defun xquery (person1 relation person2 tree)
(let  ((p1 (personstruct person1 tree)) (p2 (personstruct person2 tree))) 
 (cond ((string= relation "SPOUSE") 
        (if (isspouse p1 p2) (format t "Yes~%") (format t "No~%"))) 
   ((string= relation "CHILD") 
    (if (ischild p1 p2) (format t "Yes~%") (format t "No~%"))) 
    ((string= relation "SIBLING") 
     (if (issibling p1 p2 tree) (format t "Yes~%") (format t "No~%"))) 
    ((string= relation "ANCESTOR")  
    (if (isancestor p1 p2 tree) (format t "Yes~%") (format t "No~%"))) 
    ((string= relation "COUSIN")  
    (if (iscousin p1 p2 tree) (format t "Yes~%") (format t "No~%"))) 
   ((string= relation "UNRELATED") 
      (if (isunrelated p1 p2 tree) (format t "Yes~%") (format t "No~%"))))))


(defun wquery (relation person tree)
(let ((p1 (personstruct person tree)))
   (cond ((string= relation "Spouse")
       ;;;  (when p1 (loop for i in (person-spouses p1) doing (format t "~a~%" i)))
       (listspouses p1 tree)
             )
          ((string= relation "CHILD")
           (listchildren p1 tree)
      ;;;  (when p1 (loop for i in (person-children p1) doing (format t "~a~%" i)))
             )
          ((string= relation "SIBLING")
           (listsiblings p1 tree)
             )
           ((string= relation "ANCESTOR")
                       
             )
             ((string= relation "COUSIN")   
              )
               ((string= relation "UNRELATED")
                       )))
)




(defun family()
  (let ((tree (make-hash-table :size 1000 :test #'equal)) (input *standard-input*))
(when input
  (loop for line = (read input nil)
        while line doing
       (cond ((string= (first line) "E" )
            ;;;Person creation and spouse children assignment here
          ;;;  (format t "~a~%" line)
              (equery (second line) (third line) (fourth line) tree))                                                                                                                                                                                                   
            ((string= (first line) "X")
             ;Xquery stuff here
             (format t "~a~%" line); prints line
            (xquery (second line) (third line) (fourth line) tree))
           ((string= (first line) "W")
            ;Wquery stuff here
            (format t "~a~%" line)
              (wquery (second line) (third line) tree)
               )))
)))
    

        
