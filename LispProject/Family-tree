;;;; -*- Mode: Lisp; -*- 

(defstruct person 
  (name nil)
  (parents list)
  (children list)
  (spouses list))

(defun storeperson (p1 p2 c3 familytree)
  (if (eql p3 nil) 
      (progn
        (if (gethash p1 familytree)
            (if (gethash p1 spouses)
                (append (gethash p1 spouses) (list p2))
              (setf (gethash p1 spouses) (list p2)))
          (progn 
            (setf (gethash p1 familytree) '(no parent))
            (setf (gethash p1 spouses) (list p2))))

        (if (gethash p2 familytree)
            (if (gethash p2 spouses)
                (append (gethash p2 spouses) (list p1))
              (setf (gethash p2 spouses) (list p1)))
          (progn 
            (setf (gethash p2 familytree) '(no parent))
            (setf (gethash p2 spouses) (list p1)))))
;children
  (progn 
    (if (gethash p1 familytree)
        (if (gethash p1 spouses) 
            (progn
              (if (find p2 (gethash p1 spouses))
                  nil
                (append (gethash p1 spouses) (list p2))))
          (setf (gethash p1 spouses (list p2)))
          (progn 
            (setf (gethash p1 familytree) '(no parent))
            (setf (gethash p1 spouses) (list p2))))
    (if (gethash p2 familytree)
        (if (gethash p2 spouses)
            (progn
              (if (find p1 (gethash p2 spouses))
                  nil
                (append (gethash p2 spouses) (list p1))))
          (setf (gethash p2 spouses (list p1)))
          (progn 
            (setf (gethash p2 familytree) '(no parent))
            (setf (gethash p2 spouses) (list p1))))
    (setf (gethash c3 familytree) (list p1 p2)))))
  familytree)



(defun personstruct (symbol-name family-tree)
  "Returns a structure of type person corresponding to the key SYMBOL-NAME in the hashtable FAMILY-TREE. If there is no one in the tree with the name in SYMBOL-NAME, returns NIL."
  (gethash symbol-name family-tree nil))

(defun ancestors (p tree)
  "Returns a list of symbol-names of all the ancestors of P in TREE. Does not remove any duplicated names!"
   (let ((parent1 (personstruct (first (person-parents p)) tree))
         (parent2 (personstruct (second (person-parents p)) tree)))
     (when parent1
         (append (list (person-name parent1) (person-name parent2))
                 (ancestors parent1 tree)
                 (ancestors parent2 tree)))))

(defun family ()
  "This is the top-level function for the whole Lisp program."
  (let ((tree (make-hash-table :size 1000 :test #'equal)))   
    (setf line '(E John Mary Joesph))
    (setf linetype (first line))
    (if (string= (first line) 'E)
        (print "True"))

    (if (string= (first line) 'X)
        (print "True"))

    (if (string= (first line) 'W)
        (print "True"))))
